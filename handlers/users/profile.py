import random

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery

from api.crypto import *
from database.db import *
from keyboards.kb import *

config = ConfigParser()


class WD(StatesGroup):
    method = State()
    req = State()


class TopUp(StatesGroup):
    method = State()
    currency = State()
    sum = State()


async def my_profile(message: Message, state: FSMContext):
    user = Users.query.filter(Users.tid == message.from_user.id).first()
    if user is not None:
        if await state.get_state() is not None:
            await state.finish()

        await message.answer_photo(
            photo='https://aleksnovikov.ru/wp-content/uploads/2018/03/Telegram-dlya-biznesa.jpg', caption=f'''
<b>üë∂ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å | ID: <code>{message.from_user.id}</code>

üí¥ –ë–∞–ª–∞–Ω—Å RUB: {user.balance_rub}
üí∂ –ë–∞–ª–∞–Ω—Å EUR: {user.balance_eur}

üìö –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(Orders.query.filter(Orders.seller_tid == message.from_user.id).filter(Orders.status == 'success').all())} 
üí° –†–µ–π—Ç–∏–Ω–≥: {user.rating}/10</b>''', reply_markup=profile())


async def my_reviews(c: CallbackQuery):
    text = f'–û—Ç–∑—ã–≤—ã @{c.from_user.username}:\n'
    if Reviews.query.filter(Reviews.seller_tid == c.from_user.id).first() is not None:

        u = Reviews.query.filter(Reviews.seller_tid == c.from_user.id).all()
        for i in u:
            buyer = await c.bot.get_chat(i.buyer_tid)
            text += f'''
<b>–û—Ç @{buyer['username']}:
<code>  {i.text}</code></b>\n'''

        await c.message.answer(text)
    else:
        await c.message.answer('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤...')


async def withdrawl(c: CallbackQuery):
    await c.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:</b>', reply_markup=withdraw_kb())


async def go_req(c: CallbackQuery, state: FSMContext):
    await WD.method.set()
    method = ''
    if 'qiwi' in c.data:
        method = 'QIWI'
    elif 'cryptobot' in c.data:
        method = 'CryptoBot'
    else:
        method = 'IBAN'
    await state.update_data(method=method)
    if method == 'QIWI':
        await c.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ü—Ä–∏–º–µ—Ä: </b><i>+79998887766,500</i>')
    elif method == 'CryptoBot':
        await c.message.answer('<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:</b>')
    elif method == 'IBAN':
        await c.message.answer(
            '<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–º–∏–ª–∏—é, –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n–ü—Ä–∏–º–µ—Ä: </b><i>Denis Alabaev,'
            'AT483200000012345864,5000</i>')
    await WD.req.set()


async def set_rq(message: Message, state: FSMContext):
    await state.update_data(req=message.text)
    data = await state.get_data()
    user = Users.query.filter(Users.tid == message.from_user.id).first()
    if ',' in data['req']:
        if data['method'] == 'qiwi' and float(data['req'].split(',')[1]) <= user.balance_rub or float(
                data['req'].split(',')[2]) <= user.balance_eur and data['method'] == 'IBAN':
            await message.answer('<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>')
            await state.finish()

            config.read('config/config.ini')
            await message.bot.send_message(config['chats']['admin'], f'''
    üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!
        –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username} | ID: <code>{message.from_user.id}</code>
        –ú–µ—Ç–æ–¥: {data['method']}
        –†–µ–∫–≤–∏–∑–∏—Ç—ã,—Å—É–º–º–∞: {data['req']}
            ''', reply_markup=admin_wd(message.from_user.id))
            if data['method'] == 'QIWI':
                user.balance_rub = user.balance_rub - float(data['req'].split(',')[1])
                session.add(user)
                session.commit()
            else:
                user.balance_eur = user.balance_eur - float(data['req'].split(',')[2])
                session.add(user)
                session.commit()

        else:
            await state.finish()
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
    else:
        if data['req'].isdigit():
            if float(data['req']) <= user.balance_rub:
                await message.answer('<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>')
                await state.finish()

                config.read('config/config.ini')
                user.balance_rub = user.balance_rub - float(data['req'])
                session.add(user)
                session.commit()
                await message.bot.send_message(config['chats']['admin'], f'''
                    üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!
                        –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username} | ID: <code>{message.from_user.id}</code>
                        –ú–µ—Ç–æ–¥: {data['method']}
                        C—É–º–º–∞: {data['req']}
                            ''', reply_markup=admin_wd(message.from_user.id))

            else:
                await state.finish()
                await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
        else:
            print('a')


async def top_up(c: CallbackQuery, state: FSMContext):
    await c.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>', reply_markup=top_up_method())


async def get_method(c: CallbackQuery, state: FSMContext):
    await TopUp.method.set()
    await state.update_data(method=c.data.split(':')[1])
    if c.data.split(':')[1] == 'cryptobot':
        await c.message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:</b>', reply_markup=set_crypto_())
        await TopUp.currency.set()
    elif c.data.split(':')[1] == 'iban':
        await state.update_data(currency='eur')
        await c.message.answer('<b>üí∂ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ EURO:</b>')
        await TopUp.sum.set()
    else:
        await state.update_data(currency='rub')
        await c.message.answer('<b>üí¥–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB:</b>')
        await TopUp.sum.set()


async def set_crypto(c: CallbackQuery, state: FSMContext):
    await state.update_data(currency=c.data.split(':')[1])
    await c.message.answer('<b>üí¥–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB:</b>')
    await TopUp.sum.set()


async def invoice(message: Message, state: FSMContext):
    if message.text.isdigit():
        config.read('config/config.ini')
        await state.update_data(sum=message.text)
        data = await state.get_data()
        payload = None
        if data['method'] == 'cryptobot':
            usd = float(get_currency())
            if 'usdt' in data['currency']:
                payload = create_invoice(float(message.text) / usd, 'usdt')
            elif 'btc' in data['currency']:
                payload = create_invoice(float(message.text) / usd / float(get_rate('bitcoin')), 'btc')
            elif 'eth' in data['currency']:
                payload = create_invoice(float(message.text) / usd / float(get_rate('ethereum')), 'eth')
            elif 'ton' in data['currency']:
                payload = create_invoice(float(message.text) / 150, 'ton')
            topup = TopUps(
                topup_id=payload['invoice_id'],
                tid=message.from_user.id,
                sum=float(data['sum']),
                type=data['method']
            )
            session.add(topup)
            session.commit()
            await message.answer('<b>–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –ø–æ —Å—Å—ã–ª–∫–µ –≤ —Ç–µ—á–µ–Ω–∏–∏ 30 –º–∏–Ω—É—Ç‚ÄºÔ∏è:</b>',
                                 reply_markup=payload_kb(payload['pay_url'], payload['invoice_id']))
            await state.finish()
        if data['method'] == 'iban':
            topupid = random.randint(11111, 99999999)
            await message.answer(f'''<b>üßëüèº‚Äçüíª –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–∞ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –Ω–∏–∂–µ, 
            –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø–ª–∞—Ç–µ–∂ - –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à —Å—á–µ—Ç. 

üìë –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: <code>{config["pay"]["iban"]}</code>
üïµÔ∏è –ò–º—è, –§–∞–º–∏–ª–∏—è: <code>{config["pay"]["iban_fio"]}</code>
üí∞ –°—É–º–º–∞: <code>{data["sum"]} EUR</code></b>''', reply_markup=iban_kb(topupid, data['sum']))
            topup = TopUps(
                topup_id=str(topupid),
                tid=message.from_user.id,
                sum=float(data['sum']),
                type=data['method']
            )
            session.add(topup)
            session.commit()
            await state.finish()
        elif data['method'] == 'qiwi':
            await message.answer('–î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...')
            await state.finish()
    else:
        await state.finish()
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')


async def check_invoice_cryptobot(c: CallbackQuery):
    try:
        topup = TopUps.query.filter(TopUps.topup_id == c.data.split(':')[1]).first()
        if '"status"' in check_invoice(topup.id):
            user = Users.query.fiter(Users.tid == c.from_user.id).first()
            user.balance_rub += topup.sum
            session.add(user)
            session.commit()
            topup.status = 'success'
            session.add(topup)
            session.commit()
            await c.message.edit_text('<b>–û–ø–ª–∞—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞! –î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –ü—Ä–∏—è—Ç–Ω—ã—Ö —Å–¥–µ–ª–æ–∫!</b>')
        else:
            await c.message.answer('<b>–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>')
    except:
        pass


async def send_notification_iban(c: CallbackQuery):
    config.read('config/config.ini')
    try:
        await c.message.bot.send_message(config['chats']['admin'],
                                         f'''
<b>–ü—Ä–∏—à–µ–ª –ø–ª–∞—Ç–µ–∂ –Ω–∞ IBAN –æ—Ç @{c.from_user.username} | ID: {c.from_user.id}
–°—É–º–º–∞: {c.data.split(':')[2]} EUR

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –ø–ª–∞—Ç–µ–∂</b>''', reply_markup=iban_kb_adm(c.from_user.id, c.data.split(':')[1],
                                                                  c.data.split(':')[2]))

        await c.message.edit_text('<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>')

    except:
        pass


async def cancel_invoice_crypto(c: CallbackQuery):
    await c.message.edit_text('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
    id = c.data.split(':')[1]
    order = TopUps.query.filter(TopUps.topup_id == id).first()
    order.status = 'canceled'
    session.add(order)
    session.commit()


async def cancel_iban_pay(c: CallbackQuery):
    await c.message.edit_text('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!')
    id = c.data.split(':')[1]
    order = TopUps.query.filter(TopUps.topup_id == id).first()
    order.status = 'canceled'
    session.add(order)
    session.commit()


def register_profile(dp: Dispatcher):
    dp.register_message_handler(my_profile, text='üëë –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', state='*', is_not_banned=True)
    dp.register_callback_query_handler(my_reviews, text='reviews', is_not_banned=True)
    dp.register_callback_query_handler(withdrawl, text='withdraw', is_not_banned=True)
    dp.register_callback_query_handler(go_req, text='qiwi_wd', is_not_banned=True)
    dp.register_callback_query_handler(go_req, text='cryptobot_wd', is_not_banned=True)
    dp.register_callback_query_handler(go_req, text='iban_wd', is_not_banned=True)
    dp.register_message_handler(set_rq, state=WD.req, is_not_banned=True)

    dp.register_callback_query_handler(top_up, text='top_up', is_not_banned=True)
    dp.register_callback_query_handler(get_method, text_contains='topup:', is_not_banned=True)
    dp.register_callback_query_handler(set_crypto, text_contains='crp:', state=TopUp.currency, is_not_banned=True)
    dp.register_message_handler(invoice, state=TopUp.sum, is_not_banned=True)
    dp.register_callback_query_handler(check_invoice_cryptobot, text_contains='paysuccess', is_not_banned=True)
    dp.register_callback_query_handler(send_notification_iban, text_contains='ibanpayready', is_not_banned=True)

    dp.register_callback_query_handler(cancel_iban_pay, text_contains='ibanpaycancel', is_not_banned=True)
    dp.register_callback_query_handler(cancel_invoice_crypto, text_contains='paycancel', is_not_banned=True)
