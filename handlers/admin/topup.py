from aiogram.types import CallbackQuery
from aiogram import Dispatcher
from database.db import *


async def iban_success(c: CallbackQuery):
    user = Users.query.filter(Users.tid == c.data.split(':')[3]).first()
    order = TopUps.query.filter(TopUps.topup_id == c.data.split(':')[1]).first()
    order.status = 'success'
    session.add(order)
    session.commit()
    user.balance_eur = user.balance_eur + float(c.data.split(':')[2])
    session.add(user)
    session.commit()

    await c.message.bot.send_message(user.tid,
                                     f'<b>–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ IBAN –±—ã–ª –Ω–∞–π–¥–µ–Ω! –í–∞–º –∑–∞—á–∏—Å–ª–∏–ª–∏ {c.data.split(":")[2]} –µ–≤—Ä–æ –Ω–∞ –±–∞–ª–∞–Ω—Å‚úÖ</b>')
    await c.message.answer('–ü–ª–∞—Ç–µ–∂ –∑–∞—á–∏—Å–ª–µ–Ω!')


async def iban_cancel(c: CallbackQuery):
    order = TopUps.query.filter(TopUps.topup_id == c.data.split(':')[1]).first()
    order.status = 'cancel'
    session.add(order)
    session.commit()

    await c.message.bot.send_message(c.data.split(':')[3],
                                     '<b>–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ IBAN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –î–µ–Ω—å–≥–∏ –Ω–µ –∑–∞—á–∏—Å–ª–µ–Ω—ã.‚ùå</b>')


async def wd_accept(c: CallbackQuery):
    # user = Users.query.filter(Users.tid == c.data.split(':')[1]).first()
    await c.bot.send_message(c.data.split(':')[1],
                             '<b>üëç –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b> –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç.')
    await c.message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')


async def cancel_wd(c: CallbackQuery):
    await c.bot.send_message(c.data.split(':')[1], '''<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞üò¢</b>
    <i>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã‚õë</i>''')
    await c.message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')


async def dispute_res(c: CallbackQuery):
    try:
        if c.data.split(':')[0] == 'seller':
            seller = c.data.split(':')[1]
            buyer = c.data.split(':')[2]
            order = Orders.query.filter(Orders.order_id == c.data.split(':')[3]).first()
            seller_db = Users.query.filter(Users.tid == seller).first()
            buyer_db = Users.query.filter(Users.tid == buyer).first()
            if order.coin == 'eur':
                seller_db.balance_eur += order.summa
            elif order.coin == 'rub':
                seller_db.balance_rub += order.summa
            session.add(seller_db)
            session.commit()
            await c.message.bot.send_message(seller, f'''
–°–¥–µ–ª–∫–∞ <b>‚Ññ{order.order_id}</b> | <b>ü§¥ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂</b>

–û—Ç {buyer_db.username} –¥–ª—è {seller_db.username}
–°—É–º–º–∞: <b>{order.summa} {order.coin}</b>
–£—Å–ª–æ–≤–∏—è: {order.ifelse}
            ''')
            await c.message.bot.send_message(buyer, f'''
–°–¥–µ–ª–∫–∞ <b>‚Ññ{order.order_id}</b> | <b>üë®‚Äç‚öñ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂</b>

–û—Ç {buyer_db.username} –¥–ª—è {seller_db.username}
–°—É–º–º–∞: <b>{order.summa} {order.coin}</b>
–£—Å–ª–æ–≤–∏—è: {order.ifelse}
                        ''')
            await c.message.answer('–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–∫—Ä—ã—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–¥–∞–≤—Ü–∞!')
        else:
            buyer = c.data.split(':')[1]
            seller = c.data.split(':')[2]
            order = Orders.query.filter(Orders.order_id == c.data.split(':')[3]).first()
            seller_db = Users.query.filter(Users.tid == seller).first()
            buyer_db = Users.query.filter(Users.tid == buyer).first()
            if order.coin == 'eur':
                buyer_db.balance_eur += order.summa
            elif order.coin == 'rub':
                buyer_db.balance_rub += order.summa
            session.add(buyer_db)
            session.commit()
            await c.message.bot.send_message(buyer, f'''
–°–¥–µ–ª–∫–∞ <b>‚Ññ{order.order_id}</b> | <b>ü§¥ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂</b>

–û—Ç {buyer_db.username} –¥–ª—è {seller_db.username}
–°—É–º–º–∞: <b>{order.summa} {order.coin}</b>
–£—Å–ª–æ–≤–∏—è: {order.ifelse}
                        ''')
            await c.message.bot.send_message(seller, f'''
–°–¥–µ–ª–∫–∞ <b>‚Ññ{order.order_id}</b> | <b>üë®‚Äç‚öñ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂</b>

–û—Ç {buyer_db.username} –¥–ª—è {seller_db.username}
–°—É–º–º–∞: <b>{order.summa} {order.coin}</b>
–£—Å–ª–æ–≤–∏—è: {order.ifelse}
                                    ''')
            await c.message.answer('–ê—Ä–±–∏—Ç—Ä–∞–∂ –∑–∞–∫—Ä—ã—Ç –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!')
        order.status = 'sucessdispute'
        session.add(order)
        session.commit()
    except Exception as e:
        print(e)
        session.rollback()


def register_admin_topup(dp: Dispatcher):
    dp.register_callback_query_handler(dispute_res, is_admin=True, text_contains='seller:')
    dp.register_callback_query_handler(dispute_res, is_admin=True, text_contains='buyer:')
    dp.register_callback_query_handler(wd_accept, is_admin=True, text_contains='okwithd:')
    dp.register_callback_query_handler(cancel_wd, is_admin=True, text_contains='nowithd:')
    dp.register_callback_query_handler(iban_success, is_admin=True, text_contains='ibansuccess:')
    dp.register_callback_query_handler(iban_cancel, is_admin=True, text_contains='ibancancell:')
